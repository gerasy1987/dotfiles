# Thank you code_nomad: http://9m.no/ꪯ鵞
# and Arch Wiki contributors: https://wiki.archlinux.org/index.php/Compton

#################################
#             Backend           #
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";
use-damage = false;
experimental-backends = true;
#backend = "xrender"

#################################
#         GLX backend           #
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
# glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#glx-swap-method = "undefined";

#################################
#             Shadows           #
#################################

# Enabled client-side shadows on windows.
shadow = true;
# The blur radius for shadows. (default 12)
shadow-radius = 20;
# The left offset for shadows. (default -15)
shadow-offset-x = -10;
# The top offset for shadows. (default -15)
shadow-offset-y = -10;
# The translucency for shadows. (default .75)
shadow-opacity = .75;

log-level = "warn";
#change your username here
#log-file = "/home/erik/.config/compton.log";

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "name = 'Notification'",
    "class_g = 'i3-frame'",
    # "name = 'Docky'",
    # "name = 'Kupfer'",
    # "name = 'xfce4-notifyd'",
    # "name *= 'VLC'",
    # "name *= 'compton'",
    # "name *= 'picom'",
    "name *= 'Chromium'",
    # "name *= 'Chrome'",
    # "class_g = 'Firefox' && argb",
    # "class_g = 'Conky'",
    # "class_g = 'Kupfer'",
    # "class_g = 'Synapse'",
    # "class_g ?= 'Notify-osd'",
    # "class_g ?= 'Cairo-dock'",
    # "class_g = 'Cairo-clock'",
    # "class_g ?= 'Xfce4-notifyd'",
    # "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = true;

#################################
#             Opacity           #
#################################

inactive-opacity = .80;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;

opacity-rule = [
  "95:class_g = 'Code' && focused",
  "95:class_g = 'Ukuu-gtk' && focused",
  "95:class_g = 'kalendar' && focused",
  "95:class_g = 'VSCodium' && focused",
  "95:class_g = 'kwrite' && focused",
  "95:class_g = 'obsidian' && focused",
  "95:class_g = 'kitty' && focused",
  "95:class_g = 'dolphin' && focused",
  "95:class_g = 'krusader' && focused",
  "95:class_g = 'Slimbookbatterypreferences.py' && focused",
  "95:class_g = 'discover' && focused",
  "95:class_g = 'sweeper' && focused",
  "95:class_g = 'plasma-systemmonitor' && focused",
  "95:class_g = 'Zotero' && focused",
  "95:class_g = 'Lutris' && focused",
  "95:class_g = 'Slimbookintelcontroller' && focused",
  "95:class_g = 'Gnome-terminal' && focused",
  "95:class_g = 'i3-frame'",
  "95:class_g = 'rstudio' && focused",
  "95:class_g = 'Singlebox' && focused",
  "95:class_g = 'DesktopEditors' && focused",
  "95:class_g = 'Mailspring' && focused",
  "95:class_g = 'systemsettings' && focused",
  "95:class_g = 'discord' && focused",
  "95:class_g = 'Spotify' && focused",
  "95:class_g = 'Rofi'",
  "95:class_g = 'ark' && focused",
  "100:class_g = 'gwenview' && focused",
  "100:class_g = 'Brave-browser' && !focused",
  "100:class_g = 'zoom' && !focused",
  "100:class_g = 'librewolf-default' && !focused",
  "100:class_g = 'lattedock'"
];

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
blur-background = true;
# Blur background of opaque windows with transparent frames as well.
blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = true;

blur:
       {
         method = "kernel";
         size = 10;
         deviation = 10.0;
       };

blur-background-exclude = [
    "class_g ?= 'zoom'",
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "role = 'xborder'",
    "_GTK_FRAME_EXTENTS@:c"
];

#################################
#             Fading            #
#################################

# Fade windows during opacity changes.
fading = true;
# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 2;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.08;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.08;
# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

#################################
#           Corners             #
#################################
 
# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
corner-radius = 12;
round-borders = 0;
# # Exclude conditions for rounded corners.
rounded-corners-exclude = [
  # "class_g = 'i3-frame'"
];

round-borders-rule = [
	# "1:class_g = 'i3-frame'",
	# "1:window_type = 'desktop'",
	# "1:window_type = 'dialog'",
	# "1:window_type = 'dock'",
	# "1:window_type = 'dnd'",
	# "1:window_type = 'dropdown_menu'",
	# "1:window_type = 'tooltip'",
	# "1:window_type = 'menu'",
	# "1:window_type = 'normal'",
	# "1:window_type = 'notification'",
	# "1:window_type = 'popup_menu'",
	# "1:window_type = 'splash'",
	# "1:window_type = 'toolbar'",
	# "1:window_type = 'utility'",
	# "1:window_type = 'unknown'"
];

#################################
#             Other             #
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
# refresh-rate = 0;

# Vertical synchronization: match the refresh rate of the monitor
# this breaks transparency in virtualbox - put a "#" before next line to fix that
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
  tooltip = { fade = true, shadow = true, opacity = 0.9, focus = true };
  dock = { shadow = false }
  dnd = { shadow = false }
  popup_menu = { opacity = 0.9 }
  dropdown_menu = { opacity = 0.9 }
};

######################
#
# XSync
# See: https://github.com/yshui/compton/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;
